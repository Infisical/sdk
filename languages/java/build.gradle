/*
 * This file was generated by the Gradle 'init' task.
 */


plugins {
    id 'java-library'
    id 'maven-publish'
}

group 'com.infisical'

repositories {
    mavenCentral()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }

    dependencies {
        api 'com.fasterxml.jackson.core:jackson-core:2.9.10'
        api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.10'
        api 'net.java.dev.jna:jna-platform:5.12.1'
    }

    description = 'InfisicalSDK'
    java.sourceCompatibility = JavaVersion.VERSION_1_8

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = 'com.infisical'
                artifactId = 'sdk'

                // Get the latest tag that we'll use for the release 
                def gitTag = 'git describe --tags --abbrev=0'.execute().text.trim()
                 version = "${gitTag}-SNAPSHOT"

                afterEvaluate {
                    from components.java
                }
            }
        }
        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/infisical/sdk"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

//  Gradle build requires GitHub workflow to copy native library to resources
//  Uncomment copyNativeLib and jar tasks to use the local build (modify architecture if needed)
/**
tasks.register('copyNativeLib', Copy) {
    delete 'src/main/resources/darwin-aarch64'
    from '../../target/debug'
    include '*libinfisical_c*.dylib'
    include '*libinfisical_c*.so'
    include '*infisical_c*.dll'
    into 'src/main/resources/darwin-aarch64'
}

// Define the runExample task using the JavaExec type
tasks.register('runExample', JavaExec) {
    main = 'com.infisical.sdk.example.Example'
    classpath = sourceSets.main.runtimeClasspath
}

jar {
    dependsOn tasks.named("copyNativeLib").get()
    from 'src/main/resources'
}
 */


