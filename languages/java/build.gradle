/*
 * This file was generated by the Gradle 'init' task.
 */

import com.vanniktech.maven.publish.SonatypeHost



plugins {
    id 'java-library'
    id 'maven-publish'
    id "com.vanniktech.maven.publish" version "0.29.0"
    id 'signing'
}

group 'com.infisical'

group = rootProject.group

repositories {
    mavenCentral()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }

    dependencies {
        api 'com.fasterxml.jackson.core:jackson-core:2.9.10'
        api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.10'
        api 'net.java.dev.jna:jna-platform:5.12.1'
    }

  description = 'InfisicalSDK'
  java.sourceCompatibility = JavaVersion.VERSION_1_8
}
  


mavenPublishing {

  // Get the latest tag that we'll use for the release 
  def gitTag = 'git describe --tags --abbrev=0'.execute().text.trim()
  version = gitTag

  coordinates("com.infisical", "sdk", version)


  pom {
    name = "Infisical SDK"
    description = "Official Java SDK for Infisical"
    inceptionYear = "2023"
    url = "https://github.com/infisical/sdk"
    licenses {
      license {
        name = "The Apache License, Version 2.0"
        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
        distribution = "http://www.apache.org/licenses/LICENSE-2.0.txt"
      }
    }
    developers {
      developer {
        id = "danielhougaard"
        name = "Daniel Hougaard"
        url = "https://github.com/danielhougaard/"
      }
    }
    scm {
      url = "https://github.com/infisical/sdk/"
      connection = "scm:git:git://github.com/infisical/sdk.git"
      developerConnection = "scm:git:ssh://git@github.com/infiscial/sdk.git"
    }
  }

  publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
  signAllPublications()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

//  Gradle build requires GitHub workflow to copy native library to resources
//  Uncomment copyNativeLib and jar tasks to use the local build (modify architecture if needed)
/**
tasks.register('copyNativeLib', Copy) {
    delete 'src/main/resources/darwin-aarch64'
    from '../../target/debug'
    include '*libinfisical_c*.dylib'
    include '*libinfisical_c*.so'
    include '*infisical_c*.dll'
    into 'src/main/resources/darwin-aarch64'
}

// Define the runExample task using the JavaExec type
tasks.register('runExample', JavaExec) {
    main = 'com.infisical.sdk.example.Example'
    classpath = sourceSets.main.runtimeClasspath
}

jar {
    dependsOn tasks.named("copyNativeLib").get()
    from 'src/main/resources'
}
 */


