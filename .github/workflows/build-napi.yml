name: Build Node.js Bindings
run-name: Build Node.js Bindings

env:
    DEBUG: napi:*
    MACOSX_DEPLOYMENT_TARGET: "10.13"
permissions:
    contents: write
    id-token: write
"on":
    #push:
    #    branches:
    #       - "test-workflows"
    workflow_call:

defaults:
    run:
        shell: bash
        working-directory: languages/node

jobs:
    generate_schemas:
        name: Generate schemas
        uses: ./.github/workflows/generate-schemas.yml

    test-rust-crate:
        uses: ./.github/workflows/rust-test.yml

    build:
        needs:
            - generate_schemas
            - test-rust-crate
        strategy:
            fail-fast: false
            matrix:
                settings:
                    - os: macos-latest
                      target: x86_64-apple-darwin
                      build: |
                          yarn build && yarn post-build
                          strip -x *.node

                    - os: windows-latest
                      build: yarn build && yarn post-build
                      target: x86_64-pc-windows-msvc

                    - os: windows-latest
                      build: |
                          yarn build --target i686-pc-windows-msvc && yarn post-build
                      target: i686-pc-windows-msvc

                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
                      build: |-
                          set -e &&
                          cd ./languages/node &&
                          export npm_config_target=x86_64-unknown-linux-gnu
                          yarn build && yarn post-build
                          strip *.node

                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-musl
                      docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
                      build: set -e && cd ./languages/node && yarn build && yarn post-build && strip *.node

                    - os: macos-latest
                      target: aarch64-apple-darwin
                      build: |
                          sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
                          export CC=$(xcrun -f clang);
                          export CXX=$(xcrun -f clang++);
                          SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
                          export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
                          yarn build --target aarch64-apple-darwin && yarn post-build
                          strip -x *.node
                    - os: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
                      build: |-
                          set -e &&
                          cd ./languages/node
                          yarn build --target aarch64-unknown-linux-gnu && yarn post-build
                    - os: ubuntu-latest
                      target: armv7-unknown-linux-gnueabihf
                      setup: |
                          sudo apt-get update
                          sudo apt-get install gcc-arm-linux-gnueabihf -y
                      build: |
                          yarn build --target armv7-unknown-linux-gnueabihf && yarn post-build
                    - os: ubuntu-latest
                      target: aarch64-linux-android
                      build: |
                          yarn build --target aarch64-linux-android && yarn post-build
                    - os: ubuntu-latest
                      target: armv7-linux-androideabi
                      build: |
                          yarn build --target armv7-linux-androideabi && yarn post-build
                    - os: ubuntu-latest
                      target: aarch64-unknown-linux-musl
                      docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
                      build: |-
                          set -e &&
                          rustup target add aarch64-unknown-linux-musl &&
                          cd ./languages/node &&
                          yarn build --target aarch64-unknown-linux-musl && yarn post-build

                    - os: windows-latest
                      target: aarch64-pc-windows-msvc
                      build: yarn build --target aarch64-pc-windows-msvc && yarn post-build

        name: stable - ${{ matrix.settings.target }} - node@18
        runs-on: ${{ matrix.settings.os }}
        steps:
            - uses: actions/checkout@v4
            - name: Setup node
              uses: actions/setup-node@v4
              if: ${{ !matrix.settings.docker }}
              with:
                  node-version: 18
                  cache: yarn
            - name: Install
              uses: dtolnay/rust-toolchain@stable
              if: ${{ !matrix.settings.docker }}
              with:
                  toolchain: stable
                  targets: ${{ matrix.settings.target }}
            - name: Cache cargo
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      .cargo-cache
                      target/
                  key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
            - uses: goto-bus-stop/setup-zig@v2
              if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
              with:
                  version: 0.11.0
            - name: Setup toolchain
              run: ${{ matrix.settings.setup }}
              if: ${{ matrix.settings.setup }}
              shell: bash
            - name: Setup node x86
              if: matrix.settings.target == 'i686-pc-windows-msvc'
              run: yarn config set supportedArchitectures.cpu "ia32"
              shell: bash
            - name: Install dependencies
              run: yarn install
            - name: Setup node x86
              uses: actions/setup-node@v4
              if: matrix.settings.target == 'i686-pc-windows-msvc'
              with:
                  node-version: 18
                  cache: yarn
                  architecture: x86
            - name: Build in docker
              uses: addnab/docker-run-action@v3
              if: ${{ matrix.settings.docker }}
              with:
                  image: ${{ matrix.settings.docker }}
                  options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
                  run: ${{ matrix.settings.build }}
            - name: Build
              run: ${{ matrix.settings.build }}
              if: ${{ !matrix.settings.docker }}
              shell: bash

            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                  name: bindings-${{ matrix.settings.target }}
                  path: languages/node/infisical.*.node
                  if-no-files-found: error

            - name: Upload binding.js
              uses: actions/upload-artifact@v3
              with:
                  name: binding.js
                  path: ${{ github.workspace }}/languages/node/binding.js
                  if-no-files-found: error

            - name: Upload binding.d.ts
              uses: actions/upload-artifact@v3
              with:
                  name: binding.d.ts
                  path: ${{ github.workspace }}/languages/node/binding.d.ts
                  if-no-files-found: error
